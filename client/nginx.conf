worker_processes 1;

events {
	worker_connections 1024;
}

http {

	sendfile on;
	# restrict chunk size to stop sendfile breaking on large files
	sendfile_max_chunk 1m;
	# Hide server details info
	server_tokens off;

	access_log /var/log/access.log;
	error_log /var/log/error.log;

	log_format main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

	# allow closing connection after client stops responding
	# frees up socket-related memory
	reset_timedout_connection on;

	server {
		server_name LE_DOMAIN;
		listen 80 default_server;
		listen [::]:80 default_server;

		location '/.well-known/acme-challenge' {
			default_type "text/plain";
			root /var/www/certbot;
		}

		location /socket.io {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header HOST $host;

			proxy_pass http://backend:3001;

			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
		}

		location / {
			return 301 https://$host$request_uri;
		}
	}

	server {
		server_name LE_DOMAIN;
		listen 443 ssl http2;
		listen [::]:443 ssl http2;

		include /etc/nginx/mime.types;
		root /usr/share/nginx/html;
		index index.html;

		ssl_certificate /usr/share/nginx/certificates/fullchain.pem;
		ssl_certificate_key /usr/share/nginx/certificates/privkey.pem;
		ssl_trusted_certificate /usr/share/nginx/certificates/chain.pem;

		ssl_session_timeout 1d;
		ssl_session_cache shared:MozSSL:10m;
		ssl_session_tickets off;

		ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		ssl_prefer_server_ciphers off;

		ssl_stapling on;
		ssl_stapling_verify on;

		add_header Strict-Transport-Security "max-age=63072000" always;
		add_header Access-Control-Allow-Origin "$http_origin";

		location / {
			try_files $uri $uri/ =404;
		}

		location /socket.io {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header HOST $host;

			proxy_pass http://backend:3001;

			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
		}

	}
}